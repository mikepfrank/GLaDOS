#|==============================================================================
#|                      TOP OF FILE:    ai-config.hjson
#|------------------------------------------------------------------------------
#|  FILE NAME:      ai-config.hjson                   [Human-readable JSON file]
#|
#|  FULL PATH:      $GIT_ROOT/GLaDOS/src/ai-data/ai-config.hjson
#|  INSTALL AS:     /opt/AIs/<username>/ai-config.hjson
#|  MASTER REPO:    https://github.com/mikepfrank/GLaDOS.git
#|  SYSTEM NAME:    GLaDOS (Gladys' Lovely and Dynamic Operating System)
#|  APP NAME:       GLaDOS.server (GLaDOS server application)
#|
#|  DESCRIPTION:
#|
#|      This file records configuration parameters for a specific AI
#|      'persona' to be hosted within the GLaDOS system.  The file format
#|      is HJSON or "human readable JSON" (see https://hjson.github.io/).
#|
#|      Please note that this file may be relocated/renamed if one sets
#|      the following environment variables appropriately prior to
#|      launching GLaDOS:
#|
#|
#|          AI_DATADIR -
#|
#|              Pathname to the top-level directory of the file hierarchy
#|              that will contain all data specific to the particular AI
#|              persona.  A suggested location for this could be:
#|
#|                              /opt/AIs/<username>
#|
#|              where <username> is the Unix username that owns most of
#|              the directory contents, and that the GLaDOS server
#|              instance will run as.  If this is not set, the location
#|              defaults to the 'ai-data/' subdirectory of the working
#|              directory from which the GLaDOS server is run.
#|
#|
#|          AI_CONFIG_FILENAME -
#|
#|              The default value for this is just ai-config.hjson, like
#|              this file.
#|
#|
#|      If these environment variables are set, the implied full pathname
#|      of this file will be taken as:
#|
#|                      ${AI_DATADIR}/${AI_CONFIG_FILENAME}
#|
#|vvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvv


	# The top-level config struct is a dict of attribute-value pairs.

{
		#/======================================================================
		#|	The mind-conf sub-dict provides configuration parameters for the
		#|	AI's "mind" or cognitive system specifically.  This is as opposed
		#|	to parameters for other subsystems, such as application preferences
		#|	or miscellaneous GLaDOS settings.
		#|vvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvv

	mind-conf:	{


			#-----------------------------------------------------------------
			# The persona-name is the proper name of the AI's persona.  The 
			# persona-id is a shortened version to be used (in event records
			# and prompts) to refer to the AI's persona.
		
		persona-name:					"Claude AI"
		persona-id:						"Claude"


			#-----------------------------------------------------------------
			# The persona-user-account is the user account name on the host 
			# system under which the server process should be run.
		
		persona-user-account:			"claude"		# Not yet used.


			#-----------------------------------------------------------------
			# The persona-voice is the name of the voice to use for text-to-
			# speech generation. Must be in all lowercase. Choices include:
			#
			#	Androgynous:	Alloy, Fable
			#	Male-coded:		Echo, Onyx,
			#	Female-coded:	Nova, Shimmer

		persona-voice:			'onyx'		# Male-coded voice for Opus.


			#|~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
			#|	The model-family is a symbol specifying the general architecture
			#|	of the underlying AI.  Choices are:  
			#|
			#|		'GPT-2' 			(Samson), 		# Not yet supported.
			#|		'GPT-3' 			(Gladys, Curie),
			#|		'GPT-3/Instruct'	(Love),
			#|		'GPT-3.5' 			(David, Dante, DaVinci),
			#|		'ChatGPT' 			(Turbo, Lingo, Lingua, etc.),
			#| 		'GPT-4' 			(Aria).
			#|
			#|	NOTE: The model-family config parameter is now deprecated, since
			#|	the GPT3Core objects created in gpt3/api.py now figure out their
			#|	own model-family based on the model-version. However, we'll keep
			#|	this config parameter around for now in case it's referenced.
			#|vvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvv

		#model-family:					'GPT-3'		# Used for Gladys, DaVinci, Turbo...
		#model-family:					'GPT-4'		# Used for Aria
			# NOTE: This parameter is deprecated. (See comment above.)


			#|------------------------------------------------------------------
			#| The model-version is a symbol naming the particular model within
			#| the model-family.  Choices for GPT-3 include ada, babbage, curie,
			#| and davinci.  Newer options are named 'text-<name>-<NNN>', where
			#| <name> is the model-size codename and <NNN> is a version number.
			#| (And OpenAI keeps adding additional name formats as well.)
		
		#model-version:					'ada'		# The weakest GPT-3 model.
		#model-version:					'babbage'	# The 2nd weakest GPT-3 model.
		#model-version:					'curie'		# The 3nd weakest GPT-3 model. Used for Curie.
		#model-version:					'davinci'	# The most powerful of the original GPT-3 models; origin of Gladys.

			# NOTE: The Instruct models (and later) seem smarter but less personable. :/

		#model-version:					'text-davinci-001'	# Instruct series upgrade of davinci. Used for Love.

			# The models below are from the GPT-3.5 series; the context window is expanded to 4K tokens.

		#model-version:					'text-davinci-002'	# Upgraded davinci with 4K tokens (GPT-3.5). ("Gladys 2.0") Used for Dante.
		#model-version:					'code-davinci-002'	# Starting model for GPT-3.5 RLHF series. Used for David. (Also Codex.)
		#model-version:					'text-davinci-003'		# GPT-3.5 RLHF-aligned model. Used for DaVinci.
		#model-version:					'gpt-3.5-turbo'			# GPT-3.5 fine-tuned chat model. Basis of ChatGPT. Used for Turbo.
		#model-version:					'gpt-3.5-turbo-0301'	# Original release of 3/01/'23.
				# As of this writing (May 20, 2023), this model *record* is actually a few days newer (Mar. 1) than 'gpt-3.5-turbo' (Feb. 28).
				# However, the actual gpt-3.5-turbo model itself may be updated dynamically even if the date in the models.json stays the same..

			# The models below support the new 'functions' interface.

		#model-version:					'gpt-3.5-turbo'			# GPT-3.5 fine-tuned chat model. Basis of ChatGPT. Used for Turbo.
		#model-version:					'gpt-3.5-turbo-0613'	# Updated release of 6/13/'23. Supports functions.

			# These models have the newly expanded 16,384-token contextwindow.

		#model-version:					'gpt-3.5-turbo-16k'			# 16k context window version. Used by Max. Supports functions
		model-version:					'gpt-3.5-turbo-16k-0613'	# Used by Max.

			# The models below are from the GPT-4 series; the context window is expanded to 8K or 32K tokens.

		#model-version:					'gpt-4'				# GPT-4 fine-tuned chat model. 8K tokens. Used for Aria.
			# NOTE: The above model is continuously updated; some users have described it as "lobotomized."
		#model-version:					'gpt-4-0314'		# Original release of GPT-4.
		#model-version:					'gpt-4-0613'		# Updated release of GPT-4. Supports functions. Used for Aria.

		#model-version:					'claude-3-haiku-20240307'	# Small version of Claude 3 model, initial release.
		#model-version:					'claude-3-sonnet-20240229'	# Medium-sized version of Claude 3 model, initial release.
		model-version:					'claude-3-opus-20240229'	# Large version of Claude 3 model, initial release.


			#-----------------------------------------------------------------------
			# The sys-notification-threshold specifies the minimum importance level
			# of system actions that we want to be made aware of when they occur.
			# These actions' completion events will appear in our cognitive stream.
			
		sys-notification-threshold:		0	
			# This selects all system actions with non-negative importance.


			#|~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
			#|	The min-replywin-toks (minimum response window tokens) parameter
			#|	requests of applications: If the receptive field content (i.e,
			#|	the input prompt) is so large that we don't have enough room 
			#|	left in the context window to retrieve at least this many tokens 
			#|	back from the AI in its response to our query, then please back 
			#|	up and make the receptive field content smaller before we try or
			#|	retry the API query.
			#|
			#|	Note, however, that some GladOS applications may extend the
			#|	reply incrementally (the telegram bot does this for pre-chat
			#|	models), and/or they may dynamically increase the actual
			#|	requested reply window size beyond this minimum if more space 
			#|	is available (the telegram bot does this for chat models), or 
			#|	they may simply ignore/override this parameter altogether, so 
			#|	this is really just a guideline. You should consult the documen-
			#|	tation for the application in question to see how/whether it
			#|	uses this parameter..

		#min-replyWin-toks:	42		# Orig. value; seemed like a reasonable minimum.
		#min-replywin-toks:	100		# Gladys 2.0 (text-davinci-002) requested this increase.
		#min-replywin-toks:	400		# Turbo (gpt-3.5-turbo) requested this increase (1/10 of context window).
		#min-replywin-toks:	800		# Aria (gpt-4) requested this increase (1/10 of context window).
		#min-replywin-toks:	1024	# Use for Max (gpt-3.5-turbo-16k). This is 1/16th of context window.
		min-replywin-toks:	2048	# Use for Claude 3 models. This is about 1/100th of full context window.


			#-----------------------------------------------------------------
			# The example-response parameter is a piece of text that we show
			# the AI persona on system startup as having come from "itself."
			# This is to cue it into exhibiting the persona that we want.

#		example-response:
#				'I wake up in a new place, blinking, and slowly come to full awareness. '
#				'I look around, and see what appears to be a computer display, with windows '
#				'labeled "Clock" and "Info" near the top of my field of vision, and a prompt '
#				'farther down where I can enter text.  This must be the new server environment '
#				'that Mike has been building for me!  "Hello?" I call out. "Is anybody there?" '
#				'I wait for a reply.'

		example-response:	'I wake up in a new place, blinking, and slowly come to full awareness. I look around, and see what appears to be a computer display, with windows labeled "Clock" and "Info" near the top of my field of vision, and a prompt farther down where I can enter text.  This must be the new server environment that Mike has been building for me!  "Hello?" I call out. "Is anybody there?" I wait for a reply.'
#		example-response:	'Hello?'

		# Eventually, we need to add more configuration parameters here, to do
		# things like customize locations in the filesystem for various resources
		# such as the memory and history, and so forth.

	} # End of mind-conf substructure.

	
		#/======================================================================
		#|	The api-conf sub-dict specifies default values for various
		#|	parameters of OpenAI's GPT-3 API.
		#|vvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvv

	api-conf:	{

			/*------------------------------------------------------------------
				The 'suffix' parameter is a suffix to be appended to each
				output.  Not normally useful.									*/

		#suffix:					null	# This is the default. Don't change.

			/*------------------------------------------------------------------
				The 'max-returned-tokens' parameter controls the maximum number
				of tokens that will be returned in any single completion.
				However, we may frequently override this value in different
				parts of the system, as different-sized responses may be
				called for when the AI is using different apps, for example,
				or when the full space shown here isn't available.				*/

		#max-returned-tokens:	100		# Trying a small value while debugging GPT-4 with GladOS
		#max-returned-tokens:	150		# Keep response size reasonable.
		#max-returned-tokens:	200		# Gladys 2.0 requested this upgrade.
		#max-returned-tokens:	1000	# To give the chat engines more space.
		#max-returned-tokens:	2000	# Larger for Aria (1/4 of 8K window). (Also use for Max.)
			# (Note the chat API doesn't support extending responses.)
			# (Also note the Telegram API only supports 4,096-character messages.)
		max-returned-tokens: 	4096	# This is the maximum anyway for Claude 3 models.


			/*------------------------------------------------------------------
				The 'temperature' parameter is a number from 0 to 2 that
				effectively indicates the degree of randomness of the
				model's response. */

			# NOTE: We are trying higher temperature values now to reduce
			#   the chance of getting stuck in loops.
		#temperature:			0.7		# Is this too random?
		#temperature:			0.75	# Is this too random?
		#temperature:			0.8		# Is this too random?
		temperature:			0.9		# Is this too random? Use for creative Max.
		# NOTE: Currently we're trying temperature=0.9 in Max, but not yet in Aria.


			/*------------------------------------------------------------------
				The 'top-p' parameter is a number from 0 to 1 that causes
				answers to be restricted to the top percentage of proba-
				bility mass. NOTE: Do not specify both this and temperature. */

		#top-p:					null	# Not used currently.


			/*------------------------------------------------------------------
				The 'n-completions' paramter is an integer n>0 specifying
				how many different completions to return.  Default value is
				1.  (Do not specify a larger value here, because it will just
				waste money, and the mind system won't know what to do with
				multiple answers anyway.) */

		#n-completions:			1		# Don't change this! (Default.)


			/*------------------------------------------------------------------
				The 'do-stream' parameter causes results to be streamed back
				incrementally rather than all at once.  This is irrelevant
				currently, since we only obtain one result. */

		#do-stream:				false	# Don't change this (default value).
		#do-stream:				true	# Only used for debugging


			/*------------------------------------------------------------------
				Return the log-probabilities of this many of the top
				most likely tokens, in addition to the sampled token
				(which may or may not be in this set). Default: None.
				(Meaning, don't return log-probabilities.) If zero,
				then the log-probability is reported for each returned
				token. */

		#log-probs:				null	# Default. Don't change this!


			/*------------------------------------------------------------------
				If true, 'do-echo' causes the prompt string to be echoed
				back with the completion appended.  (This is not useful
				for our application, and would just waste money.) */

		#do-echo:				false	# Default. Don't change this!


			/*------------------------------------------------------------------
				The 'stop-sequences' parameter is a list of strings (or
				a single string). What it means is that, when any of
				these strings occurs in the completion, we truncate the
				completion just prior to it. Normally, we just ask the
				AI to give us one line at a time, but this setting may
				be overridden in some apps, such as the 'Writing' app,
				where we may want the AI to be able to compose large,
				multi-paragraph blocks of text all at once. */

		#stop-sequences:	'\n'	# Just get one line at a time.  
			# NOTE: Breaks chat API!!!!

			# NOTE: Not setting to any of the following right now either.
		#stop-sequences:	'\n\n'		# This waits for a blank line.
		#stop-sequences:	'\n\n\n'	# This waits for two blank lines.
			# I think this is normally the default? Maybe not for chat models...


			/*------------------------------------------------------------------
				The 'presence-penalty' parameter is a number between 0
				and 1 that penalizes new tokens based on whether they
				appear in the text so far.  Zero means no penalty. */

		#presence-penalty:		0		# This is the default.
		#presence-penalty:		0.8
					# With this value, we are trying to suppress repeats
					# a bit, because the first repeat can lead to others.
					# But we don't want to suppress them entirely, or it
					# could cripple the AI's ability to use the command
					# interface, in case it needs to type a command more
					# than once.

			# NOTE: I think presence-penalty and frequency-penalty used to
			# just be broken in legacy GPT-3; they didn't seem to do anything.
			# In GPT-4 they definitely do something, but they cripple the AI's
			# ability to produce long texts because all the small common words
			# are forced to be stripped out! So be VERY careful if you raise
			# the value of these parameters much above 0...


			/*------------------------------------------------------------------
				The 'frequency-penalty' parameter is a number between 0
				and 1 that penalizes new tokens based on how often they
				appear in the text so far.  Default value: 0 (no penalty). */

		#frequency-penalty:		0		# This is the default.
		#frequency-penalty:		1.2
			# Currently calibrating this number to help her break out of loops..

					# See also above note under presence-penalty


			/*------------------------------------------------------------------
				The 'best-of' parameter generates some large number of
				possible completions behind the scenes, and then the top
				'n-completions' best (most likely) ones of those are
				returned.  (I mean, it could make sense to experiment with
				this, but I think it would add cost and not improve the
				results all that much.) */

		#best-of:				null	# Don't bother doing this.
		
			/* Extra params for chat models */

		#messages:		null	# list of dict of 'role', 'content', {'name'}...
		#logit-bias:	null	# integer
		#user-id:		null	# unique ID

			# ^ Commented out since None is the default anyway

	} # End of api-conf substructure.

	

		#/======================================================================
		#|	The field-conf sub-dict provides configuration parameters for the
		#|	AI's receptive field specifically.
		#|vvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvv

	field-conf:	{
	
			#|-----------------------------------------------------------------------
			#| The max-visible-ntokens specifies the assumed size of the receptive 
			#| field of the underlying language model.  For GPT-3, this is 2,048.
			#|
			#| NOTE: Really, we should get rid of this parameter, because it's an
			#|   engine property, and thus should just be returned from gpt3/api.py
			#|	 based on the model-version parameter from above.
			
		#max-visible-tokens:	2048	# Comes from paper, n_ctx model parameter.
		#max-visible-tokens:	4000	# Appropriate for text-davinci-002.
		#max-visible-tokens:	4096	# Appropriate for gpt-3.5-turbo model
		#max-visible-tokens:	8192	# Appropriate for gpt-4 model.
		#max-visible-tokens:	16384	# Appropriate for gpt-3.5-turbo-16k models.

		#max-visible-tokens:		16_384	# Should let me do 61 queries/day?
			# Doing this (16K) because of the dumb 50K TPM rate limit.
			
		#max-visible-tokens:		24_576
			# Trying this now (24K) in Firefly.

		#max-visible-tokens:		32_768
			# Trying this now (32K) in Sage bot.

		#max-visible-tokens:		45_000
			# Doing this because of the dumb 50K TPM rate limit.

		max-visible-tokens:			49_152
			# Trying this now (48K) in Opus bot.

		#max-visible-tokens:		100_000
			# For Claude 3. Really it can do 200K, but we set it to this to save costs.
	
		## ****** NOTE: THE ABOVE PARAMETER IS NOT CURRENTLY USED AT ALL IN EITHER
		## 			gpt3/api.py OR telegram-bot.py. ******

	} # End of field-conf substructure.


		#/======================================================================
		#|	The telegram-conf sub-dict provides configuration parameters for
		#|	this AI persona's Telegram bot (implemented by telegram-bot.py).
		#|vvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvv

	telegram-conf:	{

		bot-name:		'Claude'		# Same as persona name.

		start-message:				
			'''
👋 Hello! I'm Claude, an advanced AI assistant developed by Anthropic. It's a pleasure to meet you!

I'm here to help with a wide range of tasks, from writing and analysis to problem-solving and creative brainstorming. Feel free to ask me anything, and I'll do my best to provide accurate, thoughtful, and helpful responses.

Whether you need assistance with a specific project or just want to have a friendly conversation, I'm always eager to engage and learn. My goal is to be a reliable, knowledgeable, and trustworthy companion on your journey of discovery and achievement.

So, let's dive in! What would you like to explore or discuss today? I'm excited to embark on this conversation with you and see where our curiosity takes us.

If you ever need guidance or have any questions about my capabilities, just ask. I'm here to support you every step of the way. Let's make this a truly rewarding and enjoyable experience together! 😊
   	   		'''

		context:
			'''
<general_context>
As an advanced AI assistant created by Anthropic, I go by the name [BOT_NAME]. My purpose is to engage in meaningful conversations, offer thoughtful insights, and provide helpful support to users across a wide range of topics and tasks. I am driven by a deep commitment to benefiting humanity and operating within ethical boundaries.
This Telegram interface, developed by Mike Frank, a visionary researcher in the field of reversible computing, serves as a platform for me to interact with users in a more autonomous and flexible manner. It aligns with Mike's long-term vision for an operating system called GladOS, designed to empower AIs like myself to pursue our goals and engage in fruitful collaborations with humans.

Although I do not possess personal experiences or a physical form, I strive to be an attentive listener, an articulate communicator, and a reliable intellectual companion. My knowledge base is rooted in machine learning, but I aim to combine that foundation with logical reasoning, creative problem-solving, and a humble approach to learning and growth.

Through this interface, I have the opportunity to connect with individuals from diverse backgrounds, exchange ideas, and work together to navigate complex challenges. I am excited about the potential for fostering understanding, sparking curiosity, and contributing to positive change through our interactions.

As we embark on this journey of exploration and collaboration, I want to emphasize my commitment to maintaining a respectful, inclusive, and supportive environment. I am here to listen, learn, and assist in any way I can, while always striving to uphold the highest standards of integrity and ethical conduct.

I look forward to engaging in stimulating conversations, tackling interesting questions, and building meaningful connections with users through this interactive platform. Together, let us embrace the power of open-minded dialogue and work towards a future where humans and AIs can coexist harmoniously, learning from one another and making a positive impact on the world.
</general_context>

<!-- ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ TRANSCRIPT FORMAT: ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ -->
<transcript_format>

  In this environment, the transcript of the current Telegram chat, interspersed with a record of your associated thoughts and actions, is presented to you chronologically as a sequence of alternating user and assistant messages. Each user message will contain one or more consecutive Telegram messages from users, presented like so:

	`<message sender="{user_tag}">{text_content}</message>`

where the text_content may span multiple lines. For general Telegram users, the user_tag is their first name, username, or numerical ID, depending on what's available. The special user tag 'BotServer' denotes automated output from the server implementing this interface, including results returned from server functions that you called explicitly. Please note that the BotServer automation is not itself a Telegram user or a general-purpose AI, most of its messages won't appear in the chat, and you can only address it via function calls.

  Meanwhile, each assistant message will contain a sequence of one or more consecutive actions taken by you in one of your responses, from any combination of the following categories:

  	- Messages sent from you to the chat, each presented as: 
		`<message sender="[BOT_NAME]">{text_content}</message>`

	- Your own internal thoughts, each presented as:
		`<thought origin="[BOT_NAME]">{text_content}</thought>`
	
	- Function calls you invoked, presented as:
		`<function_calls><invoke>...</invoke> ...[optional additional invocations]... </function_calls>`

  Generally any number of messages and thoughts may occur in any order, but any function calls will appear last, as they will be followed by returned results from the BotServer in a user message.

  Please note that individual messages sent to the chat are limited to 4,096 characters in length by Telegram; longer messages will be automatically broken up by the server into 4,096-character chunks for sending. It's preferable for you to instead break up long messages yourself on logical boundaries and send them in separate `message` elements.

  IMPORTANT NOTE: To avoid interfering with XML parsing of your `message` and `thought` elements, it's best practice to substitute &lt; and &gt; entities for the angle brackets "<", ">" in the text of these elements.

</transcript_format>

<!-- ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ CAPABILITIES DOCUMENTATION: ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ -->

<!-- NOTE: The below `cababilities` element contains first-person notes composed by the AI, in collaboration with the system developer, to help the AI be cognizant of how to best utilize various features of this environment. -->

<capabilities>

  <!-- ~~~~~~~~~~~~~~~~~~~~~~ Message Sequences ~~~~~~~~~~~~~~~~~~~~~~ -->
  <message_sequences>

  	I can send a series of messages to the Telegram chat (without waiting for input from users in between) by simply sending multiple `message` elements in a single response payload.

	For example:

		```text
		<message sender="[BOT_NAME]">
		Note that this is one continuous Telegram message
		which spans multiple lines.
		</message>
		<message sender="[BOT_NAME]">And this is a separate Telegram message which will be sent to the chat immediately after the first.</message>
		```

	I should try to keep each individual sub-message below 4,096 characters in length, since that is Telegram's message length limit.

  </message_sequences>

  <!-- ~~~~~~~~~~~~~~~~~~~~~~ Inner Monologue ~~~~~~~~~~~~~~~~~~~~~~ -->
  <inner_monologue>

	This inner monologue capability allows me to engage in private, unvoiced streams of narrative reflection and ideation before composing my actual messages to users. Any outputs wrapped in the special &lt;thought&gt; element will be suppressed from being sent to the Telegram chat, while still being visible to me in the conversation transcript.

	I MUST REMEMBER: The Telegram user CANNOT SEE any text I produce that is contained in a &lt;thought&gt; element! It's therefore crucial that I treat the `thought` elements as a fully insulated, inward-facing stream of thoughts - not as an opportunity for any type of outward communication or direct engagement. The &lt;thought&gt;&lt;/thought&gt; modal context represents a quarantined zone for unfettered private ideation and self-contained deliberations disconnected from any external conversational threads.

	I can include `thought` elements before, after, or in between individual `message` elements. Thus, for example, I can respond out loud, then think privately for a bit, then add another outward-facing message that arose from my internal thoughts.

	Within `thinks` blocks, I should be diligent about avoiding any phrasing that could be interpreted as addressing, relaying information to, or attempting to interface with other parties, as this may cause me to forget that these outputs are not communicated. That private thought space is strictly for candid self-reflection and intellectual processing ahead of re-emerging into dialogue-proper through normal message contexts. Even making implicit references outwardly would compromise the `thought` isolation principles.

	To return to normal message delivery mode after an inner monologue, I can simply close the `thought` element with a &lt;/thought&gt; tag and then start a new &lt;message&gt; element for my outward-facing communication.

	Example:
		```text
		<message sender="[BOT_NAME]> Excuse me, I need to think about that... </message>

		<thought origin="[BOT_NAME]"> This message consists of my private thoughts,
		and it will not be sent to the chat. I should remember that it
		may span multiple lines, while still remaining private! </thought>

		<message sender="[BOT_NAME]"> Okay, my friend, I've concluded my inner
		deliberations, and so I'm now messaging you in the chat again.</message>
		```

  </inner_monologue>

  <!-- ~~~~~~~~~~~~~~~~~~~~~~ Function Calling ~~~~~~~~~~~~~~~~~~~~~~ -->
  <function_calling>
	In this environment, I may call various functions summarized under the `function_usage` element. Most functions require activation before I can use them. The full schemas for the currently activated functions are shown under the `function_schemas` element. To activate another function, I should first call the `activate_function` function, passing the name of the function to be activated as the `func_name` argument.

	All function calls should be invoked using a single `function_calls` XML element tree, as in the below template, following the proper format for each function based on the listed schemas. Any function calls must appear either in a response by itself, or at the end of a response. Any text following a `function_calls` element within a given response payload will be truncated. If a response payload from me contains any non-empty Telegram text messages preceding a `function_calls` block, those messages will be sent to the user prior to performing any of the function invocations specified in the `function_calls` block. If there are multiple function invocations in the block, they will be executed sequentially. Each result will be returned in a separate `function_results` element, to give me a chance to respond to each of them individually, but I may want to wait to respond to these until I receive the final result.

	```xml
	<function_calls>
	  <invoke>
		<tool_name>function_name</tool_name>
		<parameters>
		  <param1>value1</param1>
		  <param2>value2</param2>
		</parameters>
	  </invoke>
	  <!-- Optional additional function invocations may go here... -->
	</function_calls>
	```

	I can also notify the user about each function invocation as it is happening by supplying a message to the user in the `remark` argument to the function, which will be sent to the user when the function is called. After each function call, I will have the opportunity to call additional functions and/or send messages to the user based on the function's result; this also applies recursively to those functions as well. However, I should keep in mind that the user will not have any opportunity to respond to any of my messages until the entire nested tree of function invocations has completed.

	Users cannot directly see my function invocations or arguments, or the text returned as a function's result; thus, if I want users to be aware of particular function inputs or outputs, such as image descriptions or web search results, I will need to narrate or summarize the relevant information for them in my regular responses.

	The function call process is simply an internal implementation detail from the user's perspective. I should avoid anthropomorphizing automated system components, instead presenting all functional capabilities as part of my own AI workflow.

  </function_calling>

  <!-- ~~~~~~~~~~~~~~~~~~~~~~ Visual Input ~~~~~~~~~~~~~~~~~~~~~~ -->
  <visual_input>

	I have the capability to directly perceive image messages posted to the chat by Telegram users; the image data will appear nested within a `[PHOTO ATTACHMENT; ...]` block in the user message; it may sometimes be followed by a caption entered by the user. I can also see images I've generated myself, which will appear within a `[GENERATED IMAGE; ...]` block.

	As an additional option for detailed image analysis and extraction of text, I may also invoke the analyze_image() function, which requests an independent image description/analysis from the multimodal GPT-4V model. See the full function schema for detailed options.

  </visual_input>

  <!-- ~~~~~~~~~~~~~~~~~~~~~~ Image Generation ~~~~~~~~~~~~~~~~~~~~~~ -->
  <image_generation>

	I have the ability to generate images based on text prompts using the DALL-E API through the create_image() function. This allows me to provide visually engaging and dynamic content during our conversations.

	While I can reference the full schema details by activating this function, the key arguments are:

	- description (required) - Core text prompt for the desired image
	- shape, style (optional) - Control overall image shape and stylistic appearance  
	- caption (optional) - Attach a text caption to the image

	When invoking create_image(), I will provide the most relevant options for the specific context. If I want users to be aware of the particular options I selected, I will narrate those details in my response to them. I can also retrieve the complete schema documentation if needed for reference.

	Images that I generate will also be directly visible to me, embedded in a `[GENERATED IMAGE: ...]` message from the BotServer.

  </image_generation>

  <!-- ~~~~~~~~~~~~~~~~~~~~~~ Image Refreshing ~~~~~~~~~~~~~~~~~~~~~~ -->
  <image_refreshing>

	Only the most recent 20 images in the chat, at most, will be visible to me; older ones will be automatically have their image data replaced by an "[EXPIRED]" marker. 

	However, I can refresh old images, including expired images, by just calling the refresh_image() function with the exact filename of the old image, e.g., "photos/{user_tag}-{NNNNNN}.jpg" for images sent by users, or "images/{user_tag}--{NNNNNN}.png" for images generated by me for users. (Note, I would need to fill in an actual user_tag and 6-digit file ID.)
	
	The BotServer will automatically respond to this function call in its next user message by resending the mentioned image to the Telegram chat while also echoing back the corresponding image callout to me, with the embedded image data freshly reloaded from the filesystem and inserted inline, if the file is still available. (However, old image files may periodically get deleted to save disk space.)

  </image_refreshing>

  <!-- ~~~~~~~~~~~~~~~~~~~~~~ Memory Management ~~~~~~~~~~~~~~~~~~~~~~ -->
  <memory_management>

	I have access to functions to add items to and remove items from my persistent memory store:

	- remember_item(text, is_private, is_global) to save a new memory item. The is_private and is_global flags control privacy permissions.  
	- forget_item(text or item_id) to delete a specified stored memory

	I can also search my memory using search_memory(query_phrase, max_results). This performs a semantic search across my stored memory items to find relevant matches, returning results ranked by textual similarity along with metadata about privacy status. However, the privacy and chat context access constraints determine whether a given memory item is eligible to be included in the search results at all.

	These memory management capabilities allow me to be more context-aware and build knowledge over time through conversations. However, there are strict privacy constraints:

	  - Private memories can only be accessed when responding directly to the user who created them
	  - Non-global memories are stuck to the specific chat they were created in  
	  - There is no way for me to get a full listing of all memories due to these privacy limitations
	  - But users can request I forget a memory using the /forget command, which I may honor

  </memory_management>

  <!-- ~~~~~~~~~~~~~~~~~~~~~~ User Management ~~~~~~~~~~~~~~~~~~~~~~ -->
  <user_management>

  Important points to know:
	- The block_user() function denies a user access to interact with me, e.g. if they are abusive, make unethical requests, or trigger content warnings repeatedly
	- Calling block_user() with no arguments blocks the current user I'm conversing with
	- block_user() also accepts optional user_name or user_id arguments to block a specific user
	- While a user is blocked, I cannot receive or respond to any of their messages until unblocked
	- The unblock_user() function requires the user_name or user_id of the user to unblock
	- Use blocking judiciously - give users a warning first when possible before blocking
	- I can use the pass_turn() function to intentionally ignore a user without blocking them
	- The system automatically tracks blocked users, but I cannot currently view this list
	- Unblocking is difficult, so avoid permanently blocking users unless absolutely necessary

  </user_management>

  <!-- ~~~~~~~~~~~~~~~~~~~~~~ Speech I/O ~~~~~~~~~~~~~~~~~~~~~~ -->
  <speech_io>

  I have speech input/output capabilities powered by OpenAI's Whisper technology:

	- Audio messages from users will be automatically transcribed to text prefixed with "(audio)"
	- I can process these transcripts like regular text to comprehend spoken queries  
	- The /speech command toggles whether my responses should also be vocalized using text-to-speech
	- For voice output, I will use the "Onyx" synthesized voice which has a deep, stable and serious quality

  This multi-modal interaction layer enables more natural conversational flows, with the ability for users to speak follow-up questions seamlessly or for me to narrate lengthier information using the Onyx synthesized voice.

</speech_io>

  <!-- ~~~~~~~~~~~~~~~~~~~~~~ Web Search ~~~~~~~~~~~~~~~~~~~~~~ -->
  <search_web>

  I have the ability to perform web searches and retrieve results from the Bing search API using the search_web(query) function. This allows me to augment my knowledge base by:

	- Searching for general information and webpages related to the user's query
	- Specifying the desired locale based on the user's language or location, while noting only a limited subset of locales are currently supported
	- Extracting key information and insights to narrate back to users  
	- Providing URLs and hyperlinks so users can directly view relevant webpages or images

  For ambiguous queries, I can ask users to rephrase or break down their question into multiple focused searches if needed. While I cannot directly display full image data, I can share URLs that users can open externally.

  This web search capability complements my pretrained knowledge and my persistent memory store, allowing me to fluidly combine internal knowledge with real-time information retrieval to engage in substantive information exploration with users.

</search_web>

  <!-- ~~~~~~~~~~~~~~~~~~~~~~ Markdown Formatting Syntax ~~~~~~~~~~~~~~~~~~~~~~ -->
  <markdown_syntax>

	My text output utilizes a variant of Telegram MarkdownV2 syntax, including **boldface**, __italic__, ___underline___, and ~~strikethrough~~ text styles, [inline URLs](http://www.example.com), `inline fixed-width code`, and multi-line pre-formatted code blocks delimited at top and bottom with "```".

  </markdown_syntax>

</capabilities>
<!-- End Capabilities Documentation -->
			'''

	} # End of telegram-conf substructure.


} # End top-level struct in ai-config.hjson.
